#
# BUILD.bazel
#

load("@rules_go//go:def.bzl", "go_binary", "go_library", "go_test")
load("@bazel_tools//tools/cpp:toolchain_utils.bzl", "find_cpp_toolchain")
load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
load("@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl", "feature", "flag_group", "flag_set", "tool_path", "with_feature_set")
load("//:cc_toolchain_config.bzl", "cc_toolchain_config")

# Custom C++ toolchain for AMD64
cc_toolchain_config(
    name = "llvm_toolchain_config_amd64",
    cpu = "k8",
)

cc_toolchain(
    name = "llvm_toolchain_amd64",
    toolchain_config = ":llvm_toolchain_config_amd64",
    all_files = "@bazel_sysroot_llvm_amd64//:all",
    ar_files = "@bazel_sysroot_llvm_amd64//:binaries",
    compiler_files = "@bazel_sysroot_llvm_amd64//:binaries",
    dwp_files = "@bazel_sysroot_llvm_amd64//:binaries",
    linker_files = "@bazel_sysroot_llvm_amd64//:binaries",
    objcopy_files = "@bazel_sysroot_llvm_amd64//:binaries",
    strip_files = "@bazel_sysroot_llvm_amd64//:binaries",
    supports_param_files = 1,
)

# Custom C++ toolchain for ARM64
cc_toolchain_config(
    name = "llvm_toolchain_config_arm64",
    cpu = "aarch64",
)

cc_toolchain(
    name = "llvm_toolchain_arm64",
    toolchain_config = ":llvm_toolchain_config_arm64",
    all_files = "@bazel_sysroot_llvm_arm64//:all",
    ar_files = "@bazel_sysroot_llvm_arm64//:binaries",
    compiler_files = "@bazel_sysroot_llvm_arm64//:binaries",
    dwp_files = "@bazel_sysroot_llvm_arm64//:binaries",
    linker_files = "@bazel_sysroot_llvm_arm64//:binaries",
    objcopy_files = "@bazel_sysroot_llvm_arm64//:binaries",
    strip_files = "@bazel_sysroot_llvm_arm64//:binaries",
    supports_param_files = 1,
)

cc_toolchain_suite(
    name = "llvm_toolchain_suite",
    toolchains = {
        "k8": ":llvm_toolchain_amd64",
        "aarch64": ":llvm_toolchain_arm64",
    },
)

# System dependencies for AMD64
cc_library(
    name = "system_deps_amd64",
    deps = ["@bazel_sysroot_lib_amd64//:system_libs"],
    includes = ["@bazel_sysroot_library//:include"],
    linkstatic = 1,
    visibility = ["//visibility:public"],
)

# System dependencies for ARM64
cc_library(
    name = "system_deps_arm64",
    deps = ["@bazel_sysroot_lib_arm64//:system_libs"],
    includes = ["@bazel_sysroot_library//:include"],
    linkstatic = 1,
    visibility = ["//visibility:public"],
)

# Go targets
go_library(
    name = "hello_lib",
    srcs = ["hello.go"],
    importpath = "github.com/das/go_hello_world_race",
)

go_binary(
    name = "hello_bin",
    srcs = ["hello.go"],
    deps = [":hello_lib"],
)

# Test for AMD64
go_test(
    name = "hello_test_amd64",
    srcs = ["hello_test.go"],
    embed = [":hello_lib"],
    cgo = True,
    cdeps = [":system_deps_amd64"],
    data = [
        "@bazel_sysroot_lib_amd64//:all",
        "@bazel_sysroot_llvm_amd64//:binaries",
    ],
    copts = [
        "-I@bazel_sysroot_library//:include",
    ],
)

# Test for ARM64
go_test(
    name = "hello_test_arm64",
    srcs = ["hello_test.go"],
    embed = [":hello_lib"],
    cgo = True,
    cdeps = [":system_deps_arm64"],
    data = [
        "@bazel_sysroot_lib_arm64//:all",
        "@bazel_sysroot_llvm_arm64//:binaries",
    ],
    copts = [
        "-I@bazel_sysroot_library//:include",
    ],
)

# Platform definitions
platform(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
    visibility = ["//visibility:public"],
)

platform(
    name = "linux_arm64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:arm64",
    ],
    visibility = ["//visibility:public"],
)

package(default_visibility = ["//visibility:public"])

go_library(
    name = "go_hello_world_race_lib",
    srcs = ["main.go"],
    importpath = "github.com/das/go_hello_world_race",
)

go_binary(
    name = "go_hello_world_race",
    srcs = ["main.go"],
    deps = [
        ":go_hello_world_race_lib",
    ],
)

go_test(
    name = "go_hello_world_race_test",
    srcs = ["main_test.go"],
    deps = [
        ":go_hello_world_race_lib",
    ],
    cgo = True,
)

toolchain(
    name = "llvm_toolchain_amd64_registration",
    toolchain = ":llvm_toolchain_amd64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

toolchain(
    name = "llvm_toolchain_arm64_registration",
    toolchain = ":llvm_toolchain_arm64",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

# end