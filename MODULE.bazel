#
# MODULE.bazel
#

module(
    name = "go_hello_world_race",
    version = "1.0",
)

bazel_dep(name = "rules_go", version = "0.54.1")
bazel_dep(name = "toolchains_llvm", version = "1.4.0")
bazel_dep(name = "gazelle", version = "0.43.0")
bazel_dep(name = "platforms", version = "0.0.10") # Need platforms module for cross-compilation later

# Use module extension to fetch sysroots (defined in deps.bzl)
sysroots_ext = use_extension("//:deps.bzl", "sysroots_ext")
sysroots_ext.fetch() # Trigger the extension to run http_archive calls

# Configure LLVM toolchains
llvm = use_extension("@toolchains_llvm//:extensions.bzl", "llvm") # Correct path to the main extension

# Configure the AMD64 toolchain
llvm.toolchain(
    name = "llvm_amd64",
    llvm_version = "20.1.4",
)

llvm.sysroot(
    name = "llvm_amd64",
    targets = ["x86_64-linux-gnu"],
    label = "@bazel_sysroot_llvm_amd64//:sysroot",
    include_prefix = "@bazel_sysroot_library//:include",
    lib_prefix = "@bazel_sysroot_lib_amd64//:lib",
    system_libs = [
        "@bazel_sysroot_library//:system_deps",
        "@bazel_sysroot_library//:system_deps_static",
        "@bazel_sysroot_lib_amd64//:system_libs",
    ],
)

# Configure the ARM64 toolchain
llvm.toolchain(
    name = "llvm_arm64",
    llvm_version = "20.1.2",
)

llvm.sysroot(
    name = "llvm_arm64",
    targets = ["aarch64-linux-gnu"],
    label = "@bazel_sysroot_llvm_arm64//:sysroot",
    include_prefix = "@bazel_sysroot_library//:include",
    lib_prefix = "@bazel_sysroot_lib_arm64//:lib",
    system_libs = [
        "@bazel_sysroot_library//:system_deps",
        "@bazel_sysroot_library//:system_deps_static",
        "@bazel_sysroot_lib_arm64//:system_libs",
    ],
)

use_repo(llvm, "llvm_amd64", "llvm_arm64")

# Go SDK setup
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download( # This uses the go_sdk extension from rules_go. It will fetch the Go SDK.
    name = "go_sdk",
    version = "1.24.3",
)
use_repo(go_sdk, "go_sdk")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(go_deps)

# end